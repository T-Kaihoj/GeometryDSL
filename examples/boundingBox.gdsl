// Originally produced by Carl Schultz

type Point(x: int, y: int)
type Rectangle(p1: Point, p2: Point)

bool larger(r1: Rectangle, r2: Rectangle)
(
    return ((r1.p1.x - r1.p2.x)^2 * (r1.p1.y - r1.p2.y)^2) >=
           ((r2.p1.x - r2.p2.x)^2 * (r2.p1.y - r2.p2.y)^2)
)

set largest(R: set)
(
    return select(r in R, all(t in R, larger(r, t)))
)

set main()
(
    points: set := {Point(33, 52), Point(73, 69),
                    Point(31, 80), Point( 8, 79),
                    Point(53, 70), Point(22, 50)}

    xCoords: set := points.x
    yCoords: set := points.y
    allPoints: set := Point(xCoords, yCoords)
    allRects: set := Rectangle(allPoints, allPoints)
    allRects: set := select(r in allRects, r.p1.x < r.p2.x && r.p1.y < r.p2.y)
    return largest(allRects)
)
